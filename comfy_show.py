import os
import time
import shutil
from watchdog.observers import Observer
from watchdog.events import FileSystemEventHandler

def wait_for_file_to_finish(path):
    """Wait for the file at `path` to finish writing."""
    size = -1
    while True:
        new_size = os.path.getsize(path)
        if new_size == size:
            return  # File size hasn't changed, assuming writing has finished
        else:
            size = new_size
            time.sleep(1)  # Wait for 1 second before checking again

class Handler(FileSystemEventHandler):
    @staticmethod
    def on_created(event):
        if event.is_directory:
            return None

        if event.src_path.endswith("output"):
            print(f"Ignoring script-generated file: {event.src_path}")
            return  # Ignore this file since it was generated by the script

        print(f"Received created event - {event.src_path}. Waiting for file to finish writing...")
        wait_for_file_to_finish(event.src_path)

        print(f"File writing completed - {event.src_path}.")
        directory_name, file_name = os.path.split(event.src_path)
        new_file_name = "output.png"
        new_file_path = os.path.join(directory_name, new_file_name)

        # Copy and overwrite the destination file if it exists
        shutil.copy2(event.src_path, new_file_path)
        print(f"Copied and renamed file to {new_file_path}, overwriting if it already exists.")

class Watcher:
    DIRECTORY_TO_WATCH = "C:\\Users\\dunde\\source\\repos\\ComfyUI\\output"

    def __init__(self):
        self.observer = Observer()

    def run(self):
        event_handler = Handler()
        self.observer.schedule(event_handler, self.DIRECTORY_TO_WATCH, recursive=True)
        self.observer.start()
        try:
            while True:
                time.sleep(5)
        except:
            self.observer.stop()
            print("Observer Stopped")

        self.observer.join()

if __name__ == "__main__":
    w = Watcher()
    w.run()
